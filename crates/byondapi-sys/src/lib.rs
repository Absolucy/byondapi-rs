// Ignore style warnings for for byondapi-c bindings
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::missing_safety_doc)]

use std::ffi::{c_char, c_float};

#[cfg(not(target_pointer_width = "32"))]
compile_error!("BYOND API only functions with 32-bit targets");

#[cfg(not(target_arch = "x86"))]
compile_error!("BYOND API only functions on x86 targets");

#[cfg(not(any(target_os = "linux", target_os = "windows")))]
compile_error!("BYOND API only supports Windows and Linux");

// Include byondapi-c bindings (generated by build.rs)
#[allow(dead_code)]
mod byond_rawbind {
    #[cfg(feature = "byond-515-1611")]
    include!(concat!(env!("OUT_DIR"), "/bindings_515_1611.rs"));
    #[cfg(feature = "byond-515-1610")]
    include!(concat!(env!("OUT_DIR"), "/bindings_515_1610.rs"));
    #[cfg(feature = "byond-515-1609")]
    include!(concat!(env!("OUT_DIR"), "/bindings_515_1609.rs"));
}

/// we must simply hope this never changes
mod version {
    use super::byond_rawbind::u4c;

    pub unsafe fn get_byond_version(library: &libloading::Library) -> (u32, u32) {
        let Byond_GetVersion: unsafe extern "C" fn(version: *mut u4c, build: *mut u4c) = library
            .get(b"Byond_GetVersion\0")
            .map(|sym| *sym)
            .expect("Failed to find Byond_GetVersion");

        let mut version = 0;
        let mut build = 0;

        Byond_GetVersion(&mut version, &mut build);

        (version, build)
    }
}

pub struct ByondApi {
    internal: byond_rawbind::ByondApi,
    version: (u32, u32),
}

unsafe impl Sync for ByondApi {}
unsafe impl Send for ByondApi {}

impl ByondApi {
    pub unsafe fn init_from_library<L>(library: L) -> Result<ByondApi, libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let lib = library.into();
        let version = version::get_byond_version(&lib);

        let internal = byond_rawbind::ByondApi::from_library(lib)?;

        Ok(ByondApi { internal, version })
    }

    pub fn get_version(&self) -> (u32, u32) {
        self.version
    }
}

// Stabilized types
pub use byond_rawbind::s1c;
pub use byond_rawbind::s1cMAX;
pub use byond_rawbind::s1cMIN;
pub use byond_rawbind::s2c;
pub use byond_rawbind::s2cMAX;
pub use byond_rawbind::s2cMIN;
pub use byond_rawbind::s4c;
pub use byond_rawbind::s4cMAX;
pub use byond_rawbind::s4cMIN;
pub use byond_rawbind::s8c;
pub use byond_rawbind::u1c;
pub use byond_rawbind::u2c;
pub use byond_rawbind::u4c;
pub use byond_rawbind::u4cOrPointer;
pub use byond_rawbind::u8c;
pub use byond_rawbind::ByondValueData;
pub use byond_rawbind::ByondValueType;
pub use byond_rawbind::CByondValue;
pub use byond_rawbind::CByondValueList;

#[cfg(feature = "byond-515-1611")]
pub use byond_rawbind::CByondXYZ;

// Stabilized functions
impl ByondApi {
    pub unsafe fn Byond_GetVersion(&self, version: *mut u4c, build: *mut u4c) {
        self.internal.Byond_GetVersion(version, build)
    }
    pub unsafe fn Byond_LastError(&self) -> *const c_char {
        self.internal.Byond_LastError()
    }
    pub unsafe fn ByondValue_Init(&self, v: *mut CByondValue) {
        self.internal.ByondValue_Init(v.cast())
    }
    pub unsafe fn ByondValue_InitNum(&self, v: *mut CByondValue, num: c_float) {
        self.internal.ByondValue_InitNum(v.cast(), num)
    }
    pub unsafe fn ByondValue_InitStr(&self, v: *mut CByondValue, str_: *const c_char) -> bool {
        self.internal.ByondValue_InitStr(v.cast(), str_)
    }
    pub unsafe fn ByondValue_InitRef(&self, v: *mut CByondValue, type_: ByondValueType, ref_: u4c) {
        self.internal.ByondValue_InitRef(v.cast(), type_, ref_)
    }
    pub unsafe fn ByondValue_Free(&self, v: *mut CByondValue) {
        self.internal.ByondValue_Free(v.cast())
    }
    pub unsafe fn ByondValue_CopyFrom(&self, dst: *mut CByondValue, src: *const CByondValue) {
        self.internal.ByondValue_CopyFrom(dst.cast(), src.cast())
    }
    pub unsafe fn ByondValue_MoveFrom(&self, dst: *mut CByondValue, src: *mut CByondValue) {
        self.internal.ByondValue_MoveFrom(dst.cast(), src.cast())
    }
    pub unsafe fn ByondValue_Type(&self, v: *const CByondValue) -> ByondValueType {
        self.internal.ByondValue_Type(v.cast())
    }
    pub unsafe fn ByondValue_IsNull(&self, v: *const CByondValue) -> bool {
        self.internal.ByondValue_IsNull(v.cast())
    }
    pub unsafe fn ByondValue_IsNum(&self, v: *const CByondValue) -> bool {
        self.internal.ByondValue_IsNum(v.cast())
    }
    pub unsafe fn ByondValue_IsStr(&self, v: *const CByondValue) -> bool {
        self.internal.ByondValue_IsStr(v.cast())
    }
    pub unsafe fn ByondValue_IsList(&self, v: *const CByondValue) -> bool {
        self.internal.ByondValue_IsList(v.cast())
    }
    pub unsafe fn ByondValue_GetNum(&self, v: *const CByondValue) -> f32 {
        self.internal.ByondValue_GetNum(v.cast())
    }
    pub unsafe fn ByondValue_GetStr(&self, v: *const CByondValue) -> *const ::std::os::raw::c_char {
        self.internal.ByondValue_GetStr(v.cast())
    }
    pub unsafe fn ByondValue_GetRef(&self, v: *const CByondValue) -> u4c {
        self.internal.ByondValue_GetRef(v.cast())
    }
    pub unsafe fn ByondValue_SetNum(&self, v: *mut CByondValue, f: f32) {
        self.internal.ByondValue_SetNum(v.cast(), f)
    }
    pub unsafe fn ByondValue_SetStr(
        &self,
        v: *mut CByondValue,
        str_: *const ::std::os::raw::c_char,
    ) -> bool {
        self.internal.ByondValue_SetStr(v.cast(), str_)
    }
    pub unsafe fn ByondValue_SetRef(&self, v: *mut CByondValue, type_: ByondValueType, ref_: u4c) {
        self.internal.ByondValue_SetRef(v.cast(), type_, ref_)
    }
    pub unsafe fn ByondValue_Equals(&self, a: *const CByondValue, b: *const CByondValue) -> bool {
        self.internal.ByondValue_Equals(a.cast(), b.cast())
    }
    pub unsafe fn ByondValueList_Init(&self, list: *mut CByondValueList) {
        self.internal.ByondValueList_Init(list.cast())
    }
    pub unsafe fn ByondValueList_InitCount(&self, list: *mut CByondValueList, count: u4c) -> bool {
        self.internal.ByondValueList_InitCount(list.cast(), count)
    }
    pub unsafe fn ByondValueList_Free(&self, list: *mut CByondValueList) {
        self.internal.ByondValueList_Free(list.cast())
    }
    pub unsafe fn ByondValueList_CopyFrom(
        &self,
        dst: *mut CByondValueList,
        src: *const CByondValueList,
    ) -> bool {
        self.internal
            .ByondValueList_CopyFrom(dst.cast(), src.cast())
    }
    pub unsafe fn ByondValueList_MoveFrom(
        &self,
        dst: *mut CByondValueList,
        src: *mut CByondValueList,
    ) {
        self.internal
            .ByondValueList_MoveFrom(dst.cast(), src.cast())
    }
    pub unsafe fn ByondValueList_SetCount(&self, list: *mut CByondValueList, count: u4c) -> bool {
        self.internal.ByondValueList_SetCount(list.cast(), count)
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn ByondValueList_SetCapacity(
        &self,
        list: *mut CByondValueList,
        capacity: u4c,
    ) -> bool {
        self.internal
            .ByondValueList_SetCapacity(list.cast(), capacity)
    }
    pub unsafe fn ByondValueList_Add(
        &self,
        list: *mut CByondValueList,
        v: *const CByondValue,
    ) -> bool {
        self.internal.ByondValueList_Add(list.cast(), v.cast())
    }
    pub unsafe fn ByondValueList_InsertAt(
        &self,
        list: *mut CByondValueList,
        idx: ::std::os::raw::c_int,
        v: *const CByondValue,
    ) -> bool {
        self.internal
            .ByondValueList_InsertAt(list.cast(), idx, v.cast())
    }
    pub unsafe fn ByondValueList_Splice(
        &self,
        list: *mut CByondValueList,
        idx: ::std::os::raw::c_int,
        delete_count: u4c,
        v: *const CByondValue,
        insert_count: u4c,
    ) -> bool {
        self.internal
            .ByondValueList_Splice(list.cast(), idx, delete_count, v.cast(), insert_count)
    }
    pub unsafe fn ByondValueList_RemoveAt(
        &self,
        list: *mut CByondValueList,
        idx: u4c,
        n: u4c,
    ) -> u4c {
        self.internal.ByondValueList_RemoveAt(list.cast(), idx, n)
    }
    pub unsafe fn Byond_GetStrId(&self, str_: *const ::std::os::raw::c_char) -> u4c {
        self.internal.Byond_GetStrId(str_)
    }
    pub unsafe fn Byond_ReadVar(
        &self,
        loc: *const CByondValue,
        varname: *const ::std::os::raw::c_char,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_ReadVar(loc.cast(), varname, result.cast())
    }
    pub unsafe fn Byond_ReadVarByStrId(
        &self,
        loc: *const CByondValue,
        varname: u4c,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_ReadVarByStrId(loc.cast(), varname, result.cast())
    }
    pub unsafe fn Byond_WriteVar(
        &self,
        loc: *const CByondValue,
        varname: *const ::std::os::raw::c_char,
        val: *const CByondValue,
    ) -> bool {
        self.internal
            .Byond_WriteVar(loc.cast(), varname, val.cast())
    }
    pub unsafe fn Byond_WriteVarByStrId(
        &self,
        loc: *const CByondValue,
        varname: u4c,
        val: *const CByondValue,
    ) -> bool {
        self.internal
            .Byond_WriteVarByStrId(loc.cast(), varname, val.cast())
    }
    pub unsafe fn Byond_CreateList(&self, result: *mut CByondValue) -> bool {
        self.internal.Byond_CreateList(result.cast())
    }
    pub unsafe fn Byond_ReadList(
        &self,
        loc: *const CByondValue,
        list: *mut CByondValueList,
    ) -> bool {
        self.internal.Byond_ReadList(loc.cast(), list.cast())
    }
    pub unsafe fn Byond_WriteList(
        &self,
        loc: *const CByondValue,
        list: *const CByondValueList,
    ) -> bool {
        self.internal.Byond_WriteList(loc.cast(), list.cast())
    }
    pub unsafe fn Byond_ReadListIndex(
        &self,
        loc: *const CByondValue,
        idx: *const CByondValue,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_ReadListIndex(loc.cast(), idx.cast(), result.cast())
    }
    pub unsafe fn Byond_WriteListIndex(
        &self,
        loc: *const CByondValue,
        idx: *const CByondValue,
        val: *const CByondValue,
    ) -> bool {
        self.internal
            .Byond_WriteListIndex(loc.cast(), idx.cast(), val.cast())
    }
    pub unsafe fn Byond_ReadPointer(
        &self,
        ptr: *const CByondValue,
        result: *mut CByondValue,
    ) -> bool {
        self.internal.Byond_ReadPointer(ptr.cast(), result.cast())
    }
    pub unsafe fn Byond_WritePointer(
        &self,
        ptr: *const CByondValue,
        val: *const CByondValue,
    ) -> bool {
        self.internal.Byond_WritePointer(ptr.cast(), val.cast())
    }
    pub unsafe fn Byond_CallProc(
        &self,
        src: *const CByondValue,
        name: *const ::std::os::raw::c_char,
        arg: *const CByondValue,
        arg_count: u4c,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_CallProc(src.cast(), name, arg.cast(), arg_count, result.cast())
    }
    pub unsafe fn Byond_CallProcByStrId(
        &self,
        src: *const CByondValue,
        name: u4c,
        arg: *const CByondValue,
        arg_count: u4c,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_CallProcByStrId(src.cast(), name, arg.cast(), arg_count, result.cast())
    }
    #[cfg(any(feature = "byond-515-1610", feature = "byond-515-1611"))]
    pub unsafe fn Byond_ToString(&self, src: *const CByondValue, result: *mut CByondValue) -> bool {
        self.internal.Byond_ToString(src.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_Block(
        &self,
        corner1: *const CByondXYZ,
        corner2: *const CByondXYZ,
        result: *mut CByondValueList,
    ) -> bool {
        self.internal
            .Byond_Block(corner1.cast(), corner2.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_Length(&self, src: *const CByondValue, result: *mut CByondValue) -> bool {
        self.internal.Byond_Length(src.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_LocateIn(
        &self,
        type_: *const CByondValue,
        list: *const CByondValue,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_LocateIn(type_.cast(), list.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_LocateXYZ(&self, xyz: *const CByondXYZ, result: *mut CByondValue) -> bool {
        self.internal.Byond_LocateXYZ(xyz.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_New(
        &self,
        type_: *const CByondValue,
        argA: *const CByondValue,
        argS: u4c,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_New(type_.cast(), argA.cast(), argS, result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_NewArglist(
        &self,
        type_: *const CByondValue,
        arglist: *const CByondValue,
        result: *mut CByondValue,
    ) -> bool {
        self.internal
            .Byond_NewArglist(type_.cast(), arglist.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_Refcount(
        &self,
        type_: *const CByondValue,
        result: *mut CByondValue,
    ) -> bool {
        self.internal.Byond_Refcount(type_.cast(), result.cast())
    }
    #[cfg(feature = "byond-515-1611")]
    pub unsafe fn Byond_XYZ(&self, src: *const CByondValue, xyz: *mut CByondXYZ) -> bool {
        self.internal.Byond_XYZ(src.cast(), xyz.cast())
    }
    pub unsafe fn ByondValue_IncRef(&self, src: *const CByondValue) {
        self.internal.ByondValue_IncRef(src.cast())
    }
    pub unsafe fn ByondValue_DecRef(&self, src: *const CByondValue) {
        self.internal.ByondValue_DecRef(src.cast())
    }
    pub unsafe fn Byond_TestRef(&self, src: *mut CByondValue) -> bool {
        self.internal.Byond_TestRef(src.cast())
    }
}
